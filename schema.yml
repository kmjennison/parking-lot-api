openapi: 3.0.3
info:
  title: Parking Lot API
  version: 1.0.0
paths:
  /api/parking-lots/:
    get:
      operationId: parking_lots_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - parking-lots
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedParkingLotList'
          description: ''
    post:
      operationId: parking_lots_create
      tags:
      - parking-lots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingLot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ParkingLot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ParkingLot'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingLot'
          description: ''
  /api/parking-lots/{parking_lot_pk}/spots/:
    get:
      operationId: parking_lots_spots_list
      parameters:
      - in: query
        name: occupied
        schema:
          type: boolean
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: parking_lot_pk
        schema:
          type: integer
        required: true
      - in: query
        name: vehicleType
        schema:
          type: array
          items:
            type: string
            enum:
            - car
            - motorcycle
            - van
        description: |-
          * `motorcycle` - motorcycle
          * `car` - car
          * `van` - van

          * `motorcycle` - motorcycle
          * `car` - car
          * `van` - van
        explode: true
        style: form
      tags:
      - parking-lots
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSpotList'
          description: ''
    post:
      operationId: parking_lots_spots_create
      parameters:
      - in: path
        name: parking_lot_pk
        schema:
          type: integer
        required: true
      tags:
      - parking-lots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Spot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Spot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Spot'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot'
          description: ''
  /api/parking-lots/{parking_lot_pk}/spots/{id}/:
    get:
      operationId: parking_lots_spots_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this spot.
        required: true
      - in: path
        name: parking_lot_pk
        schema:
          type: integer
        required: true
      tags:
      - parking-lots
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot'
          description: ''
    put:
      operationId: parking_lots_spots_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this spot.
        required: true
      - in: path
        name: parking_lot_pk
        schema:
          type: integer
        required: true
      tags:
      - parking-lots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Spot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Spot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Spot'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot'
          description: ''
    patch:
      operationId: parking_lots_spots_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this spot.
        required: true
      - in: path
        name: parking_lot_pk
        schema:
          type: integer
        required: true
      tags:
      - parking-lots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSpot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSpot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSpot'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot'
          description: ''
    delete:
      operationId: parking_lots_spots_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this spot.
        required: true
      - in: path
        name: parking_lot_pk
        schema:
          type: integer
        required: true
      tags:
      - parking-lots
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/parking-lots/{id}/:
    get:
      operationId: parking_lots_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this parking lot.
        required: true
      tags:
      - parking-lots
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingLot'
          description: ''
    put:
      operationId: parking_lots_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this parking lot.
        required: true
      tags:
      - parking-lots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingLot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ParkingLot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ParkingLot'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingLot'
          description: ''
    patch:
      operationId: parking_lots_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this parking lot.
        required: true
      tags:
      - parking-lots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedParkingLot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedParkingLot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedParkingLot'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingLot'
          description: ''
    delete:
      operationId: parking_lots_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this parking lot.
        required: true
      tags:
      - parking-lots
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/spots/:
    get:
      operationId: spots_list
      parameters:
      - in: query
        name: occupied
        schema:
          type: boolean
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: vehicleType
        schema:
          type: array
          items:
            type: string
            enum:
            - car
            - motorcycle
            - van
        description: |-
          * `motorcycle` - motorcycle
          * `car` - car
          * `van` - van

          * `motorcycle` - motorcycle
          * `car` - car
          * `van` - van
        explode: true
        style: form
      tags:
      - spots
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSpotList'
          description: ''
    post:
      operationId: spots_create
      tags:
      - spots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Spot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Spot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Spot'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot'
          description: ''
  /api/spots/{id}/:
    get:
      operationId: spots_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this spot.
        required: true
      tags:
      - spots
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot'
          description: ''
    put:
      operationId: spots_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this spot.
        required: true
      tags:
      - spots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Spot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Spot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Spot'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot'
          description: ''
    patch:
      operationId: spots_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this spot.
        required: true
      tags:
      - spots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSpot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSpot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSpot'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot'
          description: ''
    delete:
      operationId: spots_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this spot.
        required: true
      tags:
      - spots
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/vehicles/:
    get:
      operationId: vehicles_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - vehicles
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVehicleList'
          description: ''
    post:
      operationId: vehicles_create
      tags:
      - vehicles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vehicle'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
  /api/vehicles/{license_plate}/:
    get:
      operationId: vehicles_retrieve
      parameters:
      - in: path
        name: license_plate
        schema:
          type: string
        required: true
      tags:
      - vehicles
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
    put:
      operationId: vehicles_update
      parameters:
      - in: path
        name: license_plate
        schema:
          type: string
        required: true
      tags:
      - vehicles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vehicle'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
    patch:
      operationId: vehicles_partial_update
      parameters:
      - in: path
        name: license_plate
        schema:
          type: string
        required: true
      tags:
      - vehicles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVehicle'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVehicle'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVehicle'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
    delete:
      operationId: vehicles_destroy
      parameters:
      - in: path
        name: license_plate
        schema:
          type: string
        required: true
      tags:
      - vehicles
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/vehicles/{license_plate}/park/:
    post:
      operationId: vehicles_park_create
      description: Given vehicle info and a parking lot, attempt to park the vehicle.
      parameters:
      - in: path
        name: license_plate
        schema:
          type: string
        required: true
      tags:
      - vehicles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vehicle'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
  /api/vehicles/{license_plate}/remove/:
    post:
      operationId: vehicles_remove_create
      description: Given a vehicle identifier, remove the vehicle from its parking
        spot.
      parameters:
      - in: path
        name: license_plate
        schema:
          type: string
        required: true
      tags:
      - vehicles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vehicle'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
components:
  schemas:
    PaginatedParkingLotList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ParkingLot'
    PaginatedSpotList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Spot'
    PaginatedVehicleList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Vehicle'
    ParkingLot:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
      required:
      - id
      - url
    PatchedParkingLot:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
    PatchedSpot:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        parking_lot:
          type: string
          format: uri
        spot_type:
          $ref: '#/components/schemas/SpotTypeEnum'
        pos:
          type: integer
          title: Position in row
          description: The spot's position in the row.
        vehicle:
          type: string
          format: uri
          nullable: true
        occupied:
          type: boolean
          readOnly: true
    PatchedVehicle:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        license_plate:
          type: string
        vehicle_type:
          $ref: '#/components/schemas/VehicleTypeEnum'
        spots:
          type: array
          items:
            $ref: '#/components/schemas/Spot'
          readOnly: true
          default: []
    Spot:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        parking_lot:
          type: string
          format: uri
        spot_type:
          $ref: '#/components/schemas/SpotTypeEnum'
        pos:
          type: integer
          title: Position in row
          description: The spot's position in the row.
        vehicle:
          type: string
          format: uri
          nullable: true
        occupied:
          type: boolean
          readOnly: true
      required:
      - id
      - occupied
      - parking_lot
      - pos
      - spot_type
      - url
    SpotTypeEnum:
      enum:
      - motorcycle
      - car
      - van
      type: string
      description: |-
        * `motorcycle` - motorcycle
        * `car` - car
        * `van` - van
    Vehicle:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        license_plate:
          type: string
        vehicle_type:
          $ref: '#/components/schemas/VehicleTypeEnum'
        spots:
          type: array
          items:
            $ref: '#/components/schemas/Spot'
          readOnly: true
          default: []
      required:
      - license_plate
      - spots
      - url
      - vehicle_type
    VehicleTypeEnum:
      enum:
      - motorcycle
      - car
      - van
      type: string
      description: |-
        * `motorcycle` - motorcycle
        * `car` - car
        * `van` - van
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
